-- Generated by Oracle SQL Developer Data Modeler 21.2.0.165.1515
--   at:        2021-12-11 22:26:11 CET
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

DROP TABLE bary CASCADE CONSTRAINTS;

DROP TABLE dania CASCADE CONSTRAINTS;

DROP TABLE dluznicy CASCADE CONSTRAINTS;

DROP TABLE drinki CASCADE CONSTRAINTS;

DROP TABLE goscie CASCADE CONSTRAINTS;

DROP TABLE gry CASCADE CONSTRAINTS;

DROP TABLE kasyna CASCADE CONSTRAINTS;

DROP TABLE pracownicy CASCADE CONSTRAINTS;

DROP TABLE recenzje CASCADE CONSTRAINTS;

DROP TABLE restauracje CASCADE CONSTRAINTS;

DROP TABLE wspolpracownicy CASCADE CONSTRAINTS;

DROP TABLE zarzadcy CASCADE CONSTRAINTS;

DROP TABLE zet_kasyno CASCADE CONSTRAINTS;

DROP TABLE zetony CASCADE CONSTRAINTS;

DROP SEQUENCE prac_seq;

DROP SEQUENCE kas_seq;

DROP SEQUENCE gry_seq;

DROP SEQUENCE gosc_seq;

DROP SEQUENCE rec_seq;

DROP SEQUENCE wspol_seq;

DROP SEQUENCE zet_seq;

DROP SEQUENCE rest_seq;

DROP SEQUENCE bar_seq; 

CREATE TABLE bary (
    id_bar NUMBER(10) NOT NULL,
    nazwa  VARCHAR2(100 BYTE) NOT NULL,
    id_kas NUMBER(15) NOT NULL
);

ALTER TABLE bary ADD CONSTRAINT bary_pk PRIMARY KEY ( id_bar,
                                                      id_kas );

CREATE TABLE dania (
    nazwa       VARCHAR2(50 BYTE) NOT NULL,
    popularnosc NUMBER(2),
    id_rest     NUMBER(12) NOT NULL,
    id_kas      NUMBER(15) NOT NULL
);

ALTER TABLE dania
    ADD CONSTRAINT dania_pk PRIMARY KEY ( id_rest,
                                          id_kas,
                                          nazwa );

ALTER TABLE dania
    ADD CONSTRAINT pop_chk CHECK (popularnosc >= 0 and popularnosc <= 10);

CREATE TABLE dluznicy (
    id_gosc   NUMBER(12) NOT NULL,
    dlug      NUMBER(12, 2) NOT NULL,
    rata      NUMBER(12, 2) NOT NULL,
    nast_rata DATE NOT NULL,
    id_wspol  NUMBER(10) NOT NULL
);

ALTER TABLE dluznicy ADD CONSTRAINT dluznicy_pk PRIMARY KEY ( id_gosc );

ALTER TABLE dluznicy ADD CONSTRAINT dlug_chk CHECK (dlug > 0);

ALTER TABLE dluznicy ADD CONSTRAINT rata_chk CHECK (rata > 0 and rata <= dlug);

CREATE TABLE drinki (
    nazwa  VARCHAR2(100 BYTE) NOT NULL,
    id_bar NUMBER(10) NOT NULL,
    id_kas NUMBER(15) NOT NULL
);

ALTER TABLE drinki
    ADD CONSTRAINT drinki_pk PRIMARY KEY ( nazwa,
                                           id_bar,
                                           id_kas );

CREATE TABLE goscie (
    id_gosc    NUMBER(12) NOT NULL,
    nazwisko   VARCHAR2(50 BYTE) NOT NULL,
    rezerwacja DATE,
    wygrane    NUMBER(12, 2) DEFAULT 0 NOT NULL,
    id_kas     NUMBER(15) NOT NULL
);

ALTER TABLE goscie ADD CONSTRAINT goscie_pk PRIMARY KEY ( id_gosc );

CREATE TABLE gry (
    id_gry    NUMBER(8) NOT NULL,
    nazwa     VARCHAR2(50 BYTE) NOT NULL,
    typ       VARCHAR2(50 BYTE),
    przychody NUMBER(10, 2) DEFAULT 0,
    id_kas    NUMBER(15) NOT NULL
);

ALTER TABLE gry ADD CONSTRAINT gry_pk PRIMARY KEY ( id_gry );

ALTER TABLE gry ADD CONSTRAINT typ_chk CHECK (typ IN ('KARTY', 'AUTOMAT', 'KOŚCI', 'INNY'));

CREATE TABLE kasyna (
    id_kas  NUMBER(15) NOT NULL,
    nazwa   VARCHAR2(100 BYTE) NOT NULL,
    miasto  VARCHAR2(100 BYTE) NOT NULL,
    miejsca NUMBER(4) NOT NULL
);

ALTER TABLE kasyna ADD CONSTRAINT kasyna_pk PRIMARY KEY ( id_kas );

CREATE TABLE pracownicy (
    id_prac      NUMBER(15) NOT NULL,
    nazwisko     VARCHAR2(35 BYTE) NOT NULL,
    placa        NUMBER(12, 2) DEFAULT 2800 NOT NULL,
    funkcja      VARCHAR2(30 BYTE) NOT NULL,
    zatrudniony  DATE DEFAULT CURRENT_DATE NOT NULL,
    koniec_umowy DATE,
    id_kas       NUMBER(15) NOT NULL
);

ALTER TABLE pracownicy ADD CONSTRAINT pracownicy_pk PRIMARY KEY ( id_prac );

ALTER TABLE pracownicy ADD CONSTRAINT plac_chk CHECK (placa >= 2800);

ALTER TABLE pracownicy ADD CONSTRAINT funk_chk CHECK (funkcja IN ('ZARZĄDCA', 
                                                                    'BARMAN', 
                                                                    'KELNER',
                                                                    'SZEF KUCHNI',
                                                                    'SPRZĄTACZ',
                                                                    'ADMINISTRACJA',
                                                                    'OCHRONA',
                                                                    'OBSŁUGA'));

CREATE TABLE recenzje (
    id_rec  NUMBER(12) NOT NULL,
    id_gosc NUMBER(12) NOT NULL,
    opis    VARCHAR2(2000 BYTE),
    ocena   NUMBER(1) NOT NULL
);

CREATE UNIQUE INDEX recenzje__idx ON
    recenzje (
        id_gosc
    ASC );

ALTER TABLE recenzje ADD CONSTRAINT recenzje_pk PRIMARY KEY ( id_rec );

ALTER TABLE recenzje ADD CONSTRAINT ocen_chk CHECK (ocena >= 1 AND ocena <= 5);

CREATE TABLE restauracje (
    id_rest   NUMBER(12) NOT NULL,
    nazwa     VARCHAR2(100 BYTE) NOT NULL,
    przychody NUMBER(12, 2),
    id_kas    NUMBER(15) NOT NULL
);

ALTER TABLE restauracje ADD CONSTRAINT restauracje_pk PRIMARY KEY ( id_rest,
                                                                    id_kas );

CREATE TABLE wspolpracownicy (
    id_wspol     NUMBER(10) NOT NULL,
    nazwa        VARCHAR2(50 BYTE) NOT NULL,
    usluga       VARCHAR2(50 BYTE) NOT NULL,
    koszt        NUMBER(12, 2) NOT NULL,
    koniec_umowy DATE,
    id_kas       NUMBER(15) NOT NULL
);

ALTER TABLE wspolpracownicy ADD CONSTRAINT wspolpracownicy_pk PRIMARY KEY ( id_wspol );

ALTER TABLE wspolpracownicy ADD CONSTRAINT koszt_chk CHECK (koszt >= 0);

CREATE TABLE zarzadcy (
    id_prac NUMBER(15) NOT NULL
);

ALTER TABLE zarzadcy ADD CONSTRAINT zarzadcy_pk PRIMARY KEY ( id_prac );

CREATE TABLE zet_kasyno (
    id_zet NUMBER(8) NOT NULL,
    id_kas NUMBER(15) NOT NULL
);

ALTER TABLE zet_kasyno ADD CONSTRAINT zet_kasyno_pk PRIMARY KEY ( id_zet,
                                                                  id_kas );

CREATE TABLE zetony (
    id_zet   NUMBER(8) NOT NULL,
    wartosc  NUMBER(5) NOT NULL,
    kolor    VARCHAR2(20 BYTE) NOT NULL,
    wielkosc VARCHAR2(7 BYTE) NOT NULL,
    koszt    NUMBER(5) NOT NULL
);

ALTER TABLE zetony ADD CONSTRAINT zetony_pk PRIMARY KEY ( id_zet );

ALTER TABLE bary
    ADD CONSTRAINT bary_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE zetony ADD CONSTRAINT zet_koszt_chk CHECK (koszt >= 0);

ALTER TABLE zetony ADD CONSTRAINT wiel_chk CHECK (wielkosc IN ('MAŁY', 'ŚREDNI', 'DUŻY'));

ALTER TABLE zetony ADD CONSTRAINT wart_chk CHECK (wartosc >= 0 AND MOD(wartosc, 10) = 0);

ALTER TABLE dania
    ADD CONSTRAINT dania_restauracje_fk FOREIGN KEY ( id_rest,
                                                      id_kas )
        REFERENCES restauracje ( id_rest,
                                 id_kas )
            ON DELETE CASCADE;

ALTER TABLE dluznicy
    ADD CONSTRAINT dluznicy_goscie_fk FOREIGN KEY ( id_gosc )
        REFERENCES goscie ( id_gosc )
            ON DELETE CASCADE;

ALTER TABLE dluznicy
    ADD CONSTRAINT dluznicy_wspolpracownicy_fk FOREIGN KEY ( id_wspol )
        REFERENCES wspolpracownicy ( id_wspol )
            ON DELETE CASCADE;

ALTER TABLE drinki
    ADD CONSTRAINT drinki_bary_fk FOREIGN KEY ( id_bar,
                                                id_kas )
        REFERENCES bary ( id_bar,
                          id_kas )
            ON DELETE CASCADE;

ALTER TABLE goscie
    ADD CONSTRAINT goscie_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE gry
    ADD CONSTRAINT gry_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE pracownicy
    ADD CONSTRAINT pracownicy_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE recenzje
    ADD CONSTRAINT recenzje_goscie_fk FOREIGN KEY ( id_gosc )
        REFERENCES goscie ( id_gosc );

ALTER TABLE restauracje
    ADD CONSTRAINT restauracje_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE wspolpracownicy
    ADD CONSTRAINT wspolpracownicy_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE zarzadcy
    ADD CONSTRAINT zarzadcy_pracownicy_fk FOREIGN KEY ( id_prac )
        REFERENCES pracownicy ( id_prac )
            ON DELETE CASCADE;

ALTER TABLE zet_kasyno
    ADD CONSTRAINT zet_kasyno_kasyna_fk FOREIGN KEY ( id_kas )
        REFERENCES kasyna ( id_kas )
            ON DELETE CASCADE;

ALTER TABLE zet_kasyno
    ADD CONSTRAINT zet_kasyno_zetony_fk FOREIGN KEY ( id_zet )
        REFERENCES zetony ( id_zet )
            ON DELETE CASCADE;

CREATE SEQUENCE kas_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE prac_seq 
INCREMENT BY 10
START WITH 10;

CREATE SEQUENCE gry_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE gosc_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE rec_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE wspol_seq 
INCREMENT BY 100
START WITH 100;

CREATE SEQUENCE zet_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE rest_seq 
INCREMENT BY 1
START WITH 1;

CREATE SEQUENCE bar_seq 
INCREMENT BY 1
START WITH 1;

CREATE OR REPLACE TRIGGER NowyDluznik
AFTER UPDATE OF wygrane ON goscie
FOR EACH ROW
WHEN (NEW.wygrane < 0)
DECLARE
    vId NUMBER;
BEGIN
    SELECT id_wspol INTO vId
    FROM wspolpracownicy 
    WHERE id_kas = :OLD.id_kas AND
    usluga = 'WINDYKACJA';
    INSERT INTO dluznicy
    (id_gosc, dlug, rata, nast_rata, id_wspol)
    VALUES
    (:OLD.id_gosc, abs(:NEW.wygrane), ROUND(abs(:NEW.wygrane) / 12, 2), ADD_MONTHS(CURRENT_DATE, 1), vId);    
END NowyDluznik;
/

CREATE OR REPLACE TRIGGER OdrzucRec
BEFORE INSERT ON recenzje
FOR EACH ROW
DECLARE
    vId recenzje.id_gosc%TYPE := :NEW.id_gosc;
    CURSOR cDluz IS
    SELECT id_gosc
    FROM dluznicy
    WHERE id_gosc = vId;
    exDluznik EXCEPTION;
    PRAGMA EXCEPTION_INIT(exDluznik, -20001);
BEGIN
    FOR vDluz IN cDluz LOOP
        RAISE_APPLICATION_ERROR(-20001, 'Recenzja pisana przez dłużnika');
    END LOOP;
END;
/

CREATE OR REPLACE TRIGGER NowyZarz
AFTER INSERT OR UPDATE ON pracownicy
FOR EACH ROW
WHEN (NEW.funkcja = 'ZARZĄDCA')
BEGIN
    INSERT INTO zarzadcy
    VALUES
    (:NEW.id_prac);
END;
/

CREATE OR REPLACE FUNCTION Dostepnosc
(rez DATE, kas NUMBER)
RETURN BOOLEAN IS vIst BOOLEAN;
vGosc NUMBER;
vMax NUMBER;
BEGIN
    SELECT miejsca INTO vMax
    FROM kasyna
    WHERE id_kas = kas;
    SELECT COUNT(rezerwacja) INTO vGosc
    FROM goscie 
    WHERE rezerwacja = rez AND
    id_kas = kas;
    IF (vGosc = vMax) THEN
        RETURN False;
    END IF;
    RETURN True;
END Dostepnosc;
/

CREATE OR REPLACE FUNCTION dlug
(vId NUMBER)
RETURN NUMBER IS vAns NUMBER;
vVar NUMBER;
BEGIN
    SELECT COUNT(*) 
    INTO vVar
     FROM
    dluznicy WHERE
    id_gosc = vId;
    IF vVar > 0 THEN
    vAns := 1;
    RETURN vAns;
    ELSE
    vAns := 0;
    RETURN vAns;
    END IF;
END dlug;
/

CREATE OR REPLACE PROCEDURE NowyGosc
(vNazw VARCHAR2, vKas NUMBER, vRes DATE) IS
BEGIN
    INSERT INTO goscie
    (id_gosc, nazwisko, id_kas, rezerwacja)
    VALUES
    (gosc_seq.NEXTVAL, vNazw, vKas, vRes);
END NowyGosc;
/

CREATE OR REPLACE PROCEDURE NoweKasyno
(vNazw VARCHAR2, vMiast VARCHAR2, vMiej NUMBER) IS
BEGIN
    INSERT INTO kasyna
    (id_kas, nazwa, miasto, miejsca)
    VALUES
    (kas_seq.NEXTVAL, vNazw, vMiast, vMiej);
END NoweKasyno;
/

CREATE OR REPLACE PROCEDURE NowaGra
(vNazw VARCHAR2, vTyp VARCHAR2, vKas NUMBER) IS
BEGIN
    INSERT INTO gry
    (id_gry, nazwa, id_kas, typ)
    VALUES
    (gry_seq.NEXTVAL, vNazw, vKas, vTyp);
END NowaGra;
/

CREATE OR REPLACE PROCEDURE NowyPrac
(vNazw VARCHAR2, vKas NUMBER, vFunk VARCHAR2, vKon DATE, vPlaca NUMBER) IS
BEGIN
    IF vKon IS NULL THEN
        INSERT INTO pracownicy
        (id_prac, nazwisko, id_kas, funkcja, placa)
        VALUES
        (prac_seq.NEXTVAL, vNazw, vKas, vFunk, vPlaca);
    ELSE
        INSERT INTO pracownicy
        (id_prac, nazwisko, id_kas, funkcja, koniec_umowy, placa)
        VALUES
        (prac_seq.NEXTVAL, vNazw, vKas, vFunk, vKon, vPlaca);
    END IF;
END NowyPrac;
/

CREATE OR REPLACE PROCEDURE NowaRest
(vNazw VARCHAR2, vKas NUMBER) IS
BEGIN
    INSERT INTO restauracje
    (id_rest, nazwa, id_kas)
    VALUES
    (rest_seq.NEXTVAL, vNazw, vKas);
END NowaRest;
/

CREATE OR REPLACE PROCEDURE NowyBar
(vNazw VARCHAR2, vKas NUMBER) IS
BEGIN
    INSERT INTO bary
    (id_bar, nazwa, id_kas)
    VALUES
    (bar_seq.NEXTVAL, vNazw, vKas);
END NowyBar;
/

CREATE OR REPLACE PROCEDURE NowyWspol
(vNazw VARCHAR2, vKas NUMBER, vUsl VARCHAR2, vKoszt NUMBER, vKon DATE) IS
BEGIN
    IF vKon IS NULL THEN
        INSERT INTO wspolpracownicy
        (id_wspol, nazwa, usluga, koszt, id_kas)
        VALUES
        (wspol_seq.NEXTVAL, vNazw, vUsl, vKoszt, vKas);
    ELSE
        INSERT INTO wspolpracownicy
        (id_wspol, nazwa, usluga, koszt, id_kas, koniec_umowy)
        VALUES
        (prac_seq.NEXTVAL, vNazw, vUsl, vKoszt, vKas, vKon);
    END IF;
END NowyWspol;
/


CREATE OR REPLACE PROCEDURE NowaRec
(vOpis VARCHAR2, vGosc NUMBER, vOcena NUMBER) IS
BEGIN
    INSERT INTO recenzje
    (id_rec, id_gosc, opis, ocena)
    VALUES
    (rec_seq.NEXTVAL, vGosc, vOpis, vOcena);
END NowaRec;
/

CREATE OR REPLACE PROCEDURE NowyZet
(vWart NUMBER, vKolor VARCHAR2, vSize VARCHAR2, vReal NUMBER, vKas NUMBER) IS
vId NUMBER;
BEGIN
    vId := zet_seq.NEXTVAL();
    INSERT INTO zetony
    (id_zet, wartosc, kolor, wielkosc, koszt)
    VALUES
    (vId, vWart, vKolor, vSize, vReal);
    INSERT INTO zet_kasyno
    (id_zet, id_kas)
    VALUES
    (vId, vKas);
END NowyZet;
/

-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            14
-- CREATE INDEX                             1
-- ALTER TABLE                             28
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                           0
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                          0
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
